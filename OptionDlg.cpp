#include "OptionDlg.h"
#include "Common.h"
#include "ThesaurusCache.h"
#include <QFontDialog>
#include <QFileDialog>
#include <cstdlib>
#include <QProcessEnvironment>
#include <QResource>

OptionDlg::OptionDlg(QWidget *parent)
	: QDialog(parent)
{
	ui.setupUi(this);
    resize(500, 200);

	connect(ui.btFont,            SIGNAL(clicked()), this, SLOT(onFont()));
	connect(ui.btRebuiltFulltext, SIGNAL(clicked()), this, SLOT(onRebuildFulltext()));
	connect(ui.btClearCache,      SIGNAL(clicked()), this, SLOT(onClearCache()));
    connect(ui.btBibFixerPath,    SIGNAL(clicked()), this, SLOT(onSetBibFixerPath()));

	// load settings
    _setting = MySetting<UserSetting>::getInstance();
	qApp->setFont(_setting->getFont());

    int backupDays = _setting->getBackupDays();
    ui.checkAutoBack->setChecked(backupDays > 0);
    ui.sbBackupDays->setEnabled (backupDays > 0);
	ui.sbBackupDays->setValue(backupDays);

    ui.checkKeepAttachments ->setChecked(_setting->getKeepAttachments());
    ui.checkMoveAttachments ->setChecked(_setting->getMoveAttachments());
    ui.checkExportToBibFixer->setChecked(_setting->getExportToBibFixer());
    ui.leBibFixerPath->setText(_setting->getBibFixerPath());
    ui.leBibFixerPath->setCursorPosition(0);
}

void OptionDlg::onFont()
{
	bool ok;
	QFont font = QFontDialog::getFont(&ok, _setting->getFont(), this);
	if(ok)
		_setting->setFont(font);
}

void OptionDlg::accept()
{
    // save settings
	qApp->setFont(_setting->getFont());
	_setting->setBackupDays(ui.checkAutoBack->isChecked() ? ui.sbBackupDays->value() : 0);
    _setting->setKeepAttachments (ui.checkKeepAttachments->isChecked());
    _setting->setMoveAttachments (ui.checkMoveAttachments->isChecked());
    _setting->setExportToBibFixer(ui.checkExportToBibFixer->isChecked());
    _setting->setBibFixerPath(ui.leBibFixerPath->text());

	QDialog::accept();
}

void OptionDlg::onRebuildFulltext() {
	makeFullTextFiles();
}

void OptionDlg::onClearCache() {
    ThesaurusCache::getInstance()->clear();
}

void OptionDlg::onSetBibFixerPath()
{
    QString path = QFileDialog::getOpenFileName(this, tr("Select the BibFixer executable"), ".");
    if(!path.isEmpty())
    {
        ui.leBibFixerPath->setText(path);
        ui.checkExportToBibFixer->setChecked(true);
    }
}

//////////////////////////////////////////////////////////////////////////
// Setting
UserSetting::UserSetting(const QString& fileName) 
    : MySetting<UserSetting>(fileName)
{
	if(QFile(this->fileName).size() == 0)   // no setting
		loadDefaults();
}

void UserSetting::loadDefaults()
{
	setFont(qApp->font());
	setBackupDays(7);
	setKeepAttachments(false);
    setMoveAttachments(true);
	setLastImportPath(".");
	setLastAttachmentPath(".");
    setBibFixerPath(".");
	setValue("SmallIcon", false);
	setValue("ShowText",  false);
    setPapersTabIndex(0);
}

QFont UserSetting::getFont() const
{
	QFont font;
	font.fromString(value("Font").toString());
	return font;
}

int UserSetting::getBackupDays() const {
	return value("BackupDays").toInt();
}
bool UserSetting::getKeepAttachments() const {
    return value("KeepAttachments").toBool();
}
bool UserSetting::getMoveAttachments() const {
    return value("KeepPDF").toBool();
}
bool UserSetting::getExportToBibFixer() const {
    return value("ExportToBibFixer").toBool();
}
QString UserSetting::getLastImportPath() const {
	return value("LastImportPath").toString();
}
QString UserSetting::getLastAttachmentPath() const {
    return value("LastAttachmentPath").toString();
}
QString UserSetting::getBibFixerPath() const {
    return value("BibFixerPath").toString();
}

void UserSetting::setFont(const QFont& font) {
	setValue("Font", font);
}
void UserSetting::setBackupDays(int days) {
	setValue("BackupDays", days);
}
void UserSetting::setKeepAttachments(bool keep) {
    setValue("KeepAttachments", keep);
}
void UserSetting::setMoveAttachments(bool keep) {
    setValue("KeepPDF", keep);
}
void UserSetting::setExportToBibFixer(bool exportToBibFixer) {
    setValue("ExportToBibFixer", exportToBibFixer);
}
void UserSetting::setLastImportPath(const QString& path) {
	setValue("LastImportPath", path);
}
void UserSetting::setLastAttachmentPath(const QString& path) {
    setValue("LastAttachmentPath", path);
}
void UserSetting::setBibFixerPath(const QString &path) {
    setValue("BibFixerPath", path);
}

QByteArray UserSetting::getSplitterSizes(const QString& splitterName) const {
	return value("Splitters/" + splitterName).toByteArray();
}

void UserSetting::setSplitterSizes(const QString& splitterName, const QByteArray& sizes) {
	setValue("Splitters/" + splitterName, sizes);
}

QString UserSetting::getCompileDate() const
{
	// this resource file is generated by running CompileDate.bat (CompileData on Mac)
	QResource resource(":/CompileDate.txt");
	QString result = (char*)resource.data();
	return result.isEmpty() ? "Unknown" : result;
}

int UserSetting::getPapersTabIndex() const {
	return value("Indexes/PapersTab").toInt();
}

void UserSetting::setPapersTabIndex(int tab) {
	setValue("Indexes/PapersTab", tab);
}
